// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  password  String
  role      Role      @default(USER)
  posts     Post[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Post {
  id            Int        @id @default(autoincrement())
  post_content  String
  slug          String     @unique
  title         String
  duration      Int
  published     Boolean?   @default(false)
  author        User       @relation(fields: [authorId], references: [id])
  authorId      Int
  thumbnail     String?
  thumbnail_alt String?
  createdAt     DateTime?  @default(now())
  updatedAt     DateTime?  @updatedAt
  categories    Category[]
  metadatas     Metadata[]
  view          Visitor[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  posts     Post[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Page {
  id        Int        @id @default(autoincrement())
  title     String
  metadatas Metadata[]
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

model Metadata {
  id        Int       @id @default(autoincrement())
  name      String
  content   String
  page      Page?     @relation(fields: [pageId], references: [id])
  pageId    Int?
  Post      Post?     @relation(fields: [postId], references: [id])
  postId    Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Visitor {
  id        Int       @id @default(autoincrement())
  ipAddress String    @unique
  userAgent String
  post      Post[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

// model PostMeta {
//   id      Int    @id @default(autoincrement())
//   post    Post   @relation(fields: [postId], references: [id])
//   postId  Int
//   name    String
//   content String
// }

// model Hobby {
//   id   Int    @id @default(autoincrement())
//   name String
// }

// model Education {
//   id          String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   title       String
//   institution String
//   start_date  DateTime
//   end_date    DateTime
//   description String
// }

// model Experience {
//   id          String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   job         String   @map(name: "job_title")
//   company     String
//   start_date  DateTime
//   end_date    DateTime
//   description String
// }

// model Certificate {
//   id    String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   title String
//   date  DateTime
// }

// model Language {
//   id       Int    @id @default(autoincrement())
//   language String
//   level    String
// }

// model SkillCategory {
//   id     Int     @id @default(autoincrement())
//   title  String
//   skills Skill[]
// }

// model Skill {
//   id         Int           @id @default(autoincrement())
//   title      String
//   logo       String
//   percentage Int
//   category   SkillCategory @relation(fields: [categoryId], references: [id])
//   categoryId Int
// }

// model Cv {
//   id                 Int    @id @default(autoincrement())
//   alt                String
//   about_me           String @map(name: "about_me")
//   address            String
//   photo              String
//   CV                 String
//   phone              String
//   email              String
//   post_photo         String
//   homepage_photo     String
//   homepage_paragraph String
// }

// model Job {
//   id          Int    @id @default(autoincrement())
//   title       String
//   svg         String
//   description String
//   alt         String
// }

// model Comment {
//   id          Int       @id @default(autoincrement())
//   post        Post      @relation(fields: [postId], references: [id])
//   postId      Int
//   username    String
//   email       String
//   comment     String
//   ip_address  String
//   is_approved Boolean   @default(false)
//   likes       IpAddress[]
//   parent      Comment?  @relation("BlogOwnerHistory", fields: [parentId], references: [id])
//   parentId    Int?      @unique
//   deleted_on  DateTime?
//   createdAt   DateTime  @default(now()) @map(name: "created_at")
//   updatedAt   DateTime  @updatedAt @map(name: "updated_at")
// }

// model ProjectImage {
//   id    String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   image String
//   alt   String
// }

// model ProjectFeature {
//   id      String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   feature String
// }

// model Project {
//   id          Int             @id @default(autoincrement())
//   name        String
//   label       String
//   price       Int
//   description String
//   link        String          @unique
//   images      ProjectImage[]
//   features    ProjectFeature[]
// }

// model Contact {
//   id          String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   name        String
//   email       String
//   description String
//   subject     String
//   created_at  DateTime @default(now())
//   ip          String?
// }

// model Follower {
//   id         String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   email      String   @unique
//   created_at DateTime @default(now())
//   ip         String?
// }
